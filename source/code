import tkinter as tk
from tkinter import messagebox
import random
from PIL import Image, ImageTk  # Optional, if an image background is needed later

# Game variables
EASY_LEVEL_ATTEMPTS = 10
HARD_LEVEL_ATTEMPTS = 10

def set_difficulty():
    """Set attempts based on chosen difficulty."""
    global attempts
    level = difficulty.get()
    if level == "easy":
        attempts = EASY_LEVEL_ATTEMPTS
    else:
        attempts = HARD_LEVEL_ATTEMPTS
    start_game()

def check_answer():
    """Check user's guessed number."""
    global attempts
    try:
        guessed_number = int(input_field.get())
        input_field.delete(0, tk.END)

        if guessed_number < answer:
            attempts -= 1
            feedback_label.config(text="Your guess is too low!", fg="blue")
        elif guessed_number > answer:
            attempts -= 1
            feedback_label.config(text="Your guess is too high!", fg="blue")
        else:
            messagebox.showinfo("Congratulations!", f"Your guess is correct! The answer was {answer}.")
            reset_game()
            return

        # Update attempts or end game if attempts run out
        if attempts > 0:
            attempts_label.config(text=f"Attempts Remaining: {attempts}")
        else:
            messagebox.showinfo("Game Over", f"Sorry, you're out of attempts! The answer was {answer}.")
            reset_game()

    except ValueError:
        messagebox.showerror("Invalid Input", "Please enter a valid number!")

def start_game():
    """Start the game and initialize variables."""
    global answer, attempts
    answer = random.randint(1, 50)
    print(f"(For testing purposes: The answer is {answer})")  # To test the game logic
    attempts_label.config(text=f"Attempts Remaining: {attempts}")
    feedback_label.config(text="Guess a number between 1 and 50", fg="black")
    input_field.config(state="normal")
    guess_button.config(state="normal")

def reset_game():
    """Reset the game to the initial state."""
    input_field.delete(0, tk.END)
    input_field.config(state="disabled")
    guess_button.config(state="disabled")
    attempts_label.config(text="Choose difficulty to start the game")
    feedback_label.config(text="")
    difficulty_frame.pack()

def generate_gradient(canvas, width, height):
    """Create a gradient-like effect for the background."""
    for i in range(height):
        color = f"#{int(i / height * 255):02x}{int((255 - i / height * 255)):02x}ff"
        canvas.create_line(0, i, width, i, fill=color)

# Tkinter setup
root = tk.Tk()
root.title("Number Guessing Game")
root.geometry("500x350")

# Gradient Background
canvas = tk.Canvas(root, width=500, height=350)
canvas.pack(fill="both", expand=True)
generate_gradient(canvas, 500, 350)

# Difficulty Frame
difficulty_frame = tk.Frame(canvas, bg="#ffffff")  # Transparent-like frame over gradient
difficulty_label = tk.Label(difficulty_frame, text="Choose Difficulty:", font=("Arial", 12), bg="#ffffff")
difficulty_label.pack(pady=5)

difficulty = tk.StringVar(value="easy")
easy_button = tk.Radiobutton(difficulty_frame, text="Easy (10 attempts)", variable=difficulty, value="easy", command=set_difficulty, bg="#ffffff")
easy_button.pack()
hard_button = tk.Radiobutton(difficulty_frame, text="Hard (10 attempts)", variable=difficulty, value="hard", command=set_difficulty, bg="#ffffff")
hard_button.pack()
difficulty_frame.place(relx=0.5, rely=0.3, anchor="center")

# Game Frame
game_frame = tk.Frame(canvas, bg="#ffffff")

attempts_label = tk.Label(game_frame, text="Choose difficulty to start the game", font=("Arial", 12), bg="#ffffff")
attempts_label.pack(pady=10)

feedback_label = tk.Label(game_frame, text="", font=("Arial", 12), bg="#ffffff")
feedback_label.pack(pady=10)

input_field = tk.Entry(game_frame, font=("Arial", 12))
input_field.pack(pady=5)

guess_button = tk.Button(game_frame, text="Submit Guess", font=("Arial", 12), state="disabled", command=check_answer)
guess_button.pack(pady=10)

game_frame.place(relx=0.5, rely=0.7, anchor="center")

# Run the application
root.mainloop()
